const firebaseConfig = {
  apiKey: "AIzaSyCGFXLXwlPWtlh7xpfGcKTfvpfhD546aqE",
  authDomain: "video-chat-5d315.firebaseapp.com",
  projectId: "video-chat-5d315",
  storageBucket: "video-chat-5d315.appspot.com",
  messagingSenderId: "918961343989",
  appId: "1:918961343989:web:9aa79e8179981db46164bc",
};

if (!firebase.apps.length) {
  firebase.initializeApp(firebaseConfig);
}
const firestore = firebase.firestore();
const settings = {
  timestampsInSnapshots: true,
};
firestore.settings(settings);

const servers = {
  iceServers: [
    {
      urls: ["stun:stun1.l.google.com:19302", "stun:stun2.l.google.com:19302"],
    },
  ],
  iceCandidatePoolSize: 10,
};

const pc = new RTCPeerConnection(servers);
let localStream = null;
let remoteStream = null;

//get dom elements
const webCamButton = document.querySelector("#webcamButton");
const webCamVideo = document.querySelector("#webcamVideo");
const callButton = document.querySelector("#callButton");
const callInput = document.querySelector("#callInput");
const answerButton = document.querySelector("#answerButton");
const remoteVideo = document.querySelector("#remoteVideo");
const hangUpButton = document.querySelector("#hangupButton");

webCamButton.onclick = async () => {
  localStream = await navigator.mediaDevices.getUserMedia({
    video: true,
    audio: true,
  });
  remoteStream = new MediaStream();

  //push audio and video connection onto peer
  const mediaStreamTrack = localStream.getTracks();
  mediaStreamTrack.forEach((track) => {
    pc.addTrack(track, localStream);
  });

  //pull tracks from peer and set it to remote stream
  pc.ontrack = (event) => {
    event.streams[0].getTracks().forEach((track) => {
      remoteStream.addTrack(track);
    });
  };

  webCamVideo.srcObject = localStream;
  remoteVideo.srcObject = remoteStream;

  callButton.disabled = false;
  answerButton.disabled = false;
  webCamButton.disabled = true;
};

// the user who makes the call makes an offer
callButton.onclick = async () => {
  //reference to firebase collection
  /*1->There exists a collection called calls 
  under that you have another subcollections called 
  offer candidate and answer candidate
  */
  const callDoc = firestore.collection("calls").doc();
  const offerCandidates = callDoc.collection("offerCandidates");
  const answerCandidates = callDoc.collection("answerCandidates");

  //unique identification generated by firestore
  callInput.value = callDoc.id;

  pc.onicecandidate = (event) => {
    event.candidate && offerCandidates.add(event.candidate.toJSON());
  };

  // create offer
  const offerDescription = await pc.createOffer();
  await pc.setLocalDescription(offerDescription);
  const offer = {
    sdp: offerDescription.sdp,
    type: offerDescription.type,
  };
  await callDoc.set({ offer });

  // Listen for remote answer
  callDoc.onSnapshot((snapshot) => {
    const data = snapshot.data();
    if (!pc.currentRemoteDescription && data?.answer) {
      const answerDescription = new RTCSessionDescription(data.answer);
      pc.setRemoteDescription(answerDescription);
    }
  });

  // Listen for remote ICE candidates
  answerCandidates.onSnapshot((snapshot) => {
    snapshot.docChanges().forEach((change) => {
      if (change.type === "added") {
        const candidate = new RTCIceCandidate(change.doc.data());
        pc.addIceCandidate(candidate);
      }
    });
  });
};
//answer call 
answerButton.onclick = async () => {
  const callId = callInput.value;
  const callDoc = firestore.collection('calls').doc(callId);
  const offerCandidates = callDoc.collection('offerCandidates');
  const answerCandidates = callDoc.collection('answerCandidates');

  pc.onicecandidate = event => {
    event.candidate && answerCandidates.add(event.candidate.toJSON());
  };

  // Fetch data, then set the offer & answer

  const callData = (await callDoc.get()).data();

  const offerDescription = callData.offer;
  await pc.setRemoteDescription(new RTCSessionDescription(offerDescription));
  hangUpButton.disabled=false;
  const answerDescription = await pc.createAnswer();
  await pc.setLocalDescription(answerDescription);

  const answer = {
    type: answerDescription.type,
    sdp: answerDescription.sdp,
  };

  await callDoc.update({ answer });

  // Listen to offer candidates

  offerCandidates.onSnapshot((snapshot) => {
    snapshot.docChanges().forEach((change) => {
      console.log(change)
      if (change.type === 'added') {
        let data = change.doc.data();
        pc.addIceCandidate(new RTCIceCandidate(data));
      }
    });
  });
};

hangUpButton.addEventListener('click',(event)=>{
  if(pc)
  {
    pc.close();
    alert("Call has successfully ended");
  }
})